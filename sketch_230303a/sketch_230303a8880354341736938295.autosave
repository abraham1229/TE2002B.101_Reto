/*
Jesús Alejandro Gómez Bautista A01736171 | IRS
Abraham Ortiz Castro | A01736196 | IRS
Eleazar Olivas Gaspar | A01731405 | IRS
Juego "Space Invaders" con uso de processing.
*/
//Importado de librerias

//Libreria para uso de archivos de sonido (.mp3).
import processing.sound.*;

//Libreria para comunicacnión serial por puerto.
//import processing.serial.*;

//Sprites en uso, archivos png.
PImage SpaceBack, NaveLeft, NaveRight, SpriteJefeDavid;

//OST juego.
SoundFile disparo_nave, bossTheme, gameTheme;

//Inicialización de variables globales.
int pixelsize = 4;
int gridsize  = pixelsize * 7 + 5;

//Inicialización del obejeto jugador.
Player player;

//Arreglos para la inicialización de enemigos, jefes y proyectiles.
ArrayList enemies = new ArrayList();
ArrayList bullets = new ArrayList();
ArrayList jefes = new ArrayList(); 

//Inicialización de variables para el movimiento de enemigos.
int direction = 1;
boolean incy = false;

//Inicialización del puntaje obtenido.
int score = 0;

//Tipo de letra para el display de puntaje.
PFont f;

//Funcion setup, se ejecuta una vez al inicio del programa.
void setup() {
    //Inicia tamaño de la ventana con 1900  * 1000 pixeles.
    size(1900,1000);

    //Carga de los archivos png para los sprites de los objetos.
    SpriteJefeEmmanuel = loadImage("FotoEmmanuelJefe.png");
    SpriteJefeDavid = loadImage("FotoDavidJefe.png");
    SpriteNaveJugador = loadImage("spriteNaveJugador.png");
    SpriteVaderTie = loadImage("vaderTie.png");
    SpaceBack = loadImage("SpaceBg.png");
    NaveLeft = loadImage("NaveLeft.png");
    NaveRight = loadImage("NaveRight.png");

    //Carga de los archivos de audio para el OST del juego.
    disparo_nave = new SoundFile(this, "Disparo.mp3");
    bossTheme = new SoundFile(this, "BOSS.mp3"); 
    gameTheme = new SoundFile(this, "IOT_invaders.mp3");
    gameTheme.play();

    //Background del juego.
    background(SpaceBack);
    noStroke();

    //Crea jugador.
    player = new Player();

    //Crean enemigos.
    createEnemies();

    //Crean jefes.
    createBosses();

    //Crean el tipo de letra 'arial' y el tamaño '36' para mostrar el puntaje
    f = createFont("Arial", 36, true);

}

//Funcion de draw, se encarga de dibujar al jugador y los enemigos así como los jefes y balas.
void draw() {
    //Se vuelve a dibujar el fondo para dar la ilución de movimiento, y que no se vean los anteriores dibujos.
    background(SpaceBack);
    
    //Llamada a funcion que hace el display del puntaje.
    drawScore();

    //Dibuja al jugador.
    player.draw();

    //Dibujo del arreglo de balas.
    for (int i = 0; i < bullets.size(); i++) {
        Bullet bullet = (Bullet) bullets.get(i);
        bullet.draw();
    }

    //Dibujo del arreglo de enemigos, y su movimiento.
    for (int i = 0; i < enemies.size(); i++) {
        Enemy enemy = (Enemy) enemies.get(i);
        if (enemy.outside() == true) {
            direction *= (-1);
            incy = true;
            break;
        }
    }

    //Verificacion si el enemigo esta vivo.
    for (int i = 0; i < enemies.size(); i++) {
        Enemy enemy = (Enemy) enemies.get(i);
        if (!enemy.alive()) {
            enemies.remove(i);
        } else {
            enemy.draw();
        }
    }

    //Condicional, cuando el puntaje llega a 8400 significa que todos los enemigos del arreglo inicial han sido derrotados.
    //Empieza batalla contra jefes.
    if (score==8400){
        //Se detiene el thema original.
        gameTheme.stop();

        //Inicia tema de los jefes.
        if (!bossTheme.isPlaying()){
            bossTheme.play();
        }

        //Dibujo de Jefes y su movimiento.
        for (int i = 0; i < jefes.size(); i++) {
        Enemy enemy = (Enemy) jefes.get(i);
        if (enemy.outside() == true) {
            direction *= (-1);
            incy = true;
            break;
        }
    }

    //Verifica si los jefes se encuentran vivos para seguir dibujandolos. 
    for (int i = 0; i < jefes.size(); i++) {
        Enemy enemy = (Enemy) jefes.get(i);
        if (!enemy.alive()) {
            jefes.remove(i);
        } else {
            enemy.draw();
        }
    }
    }
    incy = false;

    //nuevo juego.
    if(score == 9000){
        background(0);
        textFont(f);
        text("Felicidades compañero ganaste!!!",(width/2)-40, height/2-30);
        text("Nuevo juego", (width/2)-40, height/2);
        text("Si [UpKey]       no [DownKey]", (width/2)-40, (height/2)+30);

        //Inicio nuevo juego.
        if(keyPressed && keyCode == UP){
            newStart();
        }

        //Fin del juego.
        if(keyPressed && keyCode == DOWN){
            exit();
        }

    }
}
void newStart(){
    background(SpaceBack);
    noStroke();

    //Crea jugador.
    player = new Player();

    //Crean enemigos.
    createEnemies();

    //Crean jefes.
    createBosses();

    //Reinicio de puntaje
    score = 0;
}

//Función que hace el display del puntaje.
void drawScore() {
    textFont(f);
    text("Score: " + String.valueOf(score), 300, 50);
}

//Funcion que crea el arreglo de los enemigos.
void createEnemies() {
    for (int i = 0; i < width/gridsize/2; i++) {
        for (int j = 0; j <= 5; j++) {
            enemies.add(new Enemy(i*gridsize+20, j*gridsize + 70, SpriteVaderTie, 1, 50));
        }
    }
}

//Funcion que crea el arreglo de los jefes.
void createBosses(){
    for (int i = 0; i <= 1; i++) {
        for (int j = 0; j <= 0; j++) {
            if (i == 0){
                jefes.add(new Enemy(i*gridsize, j*gridsize + 70, SpriteJefeEmmanuel,10, 600));
            }else{
                jefes.add(new Enemy(i*gridsize + 200, j*gridsize + 70, SpriteJefeDavid,10, 600));
            }
        }
    }
}


//Se establece la clase de Nave 'SpaceShip'.
class SpaceShip {
    int x, y;
    PImage sprite;

    void draw() {
        updateObj();
        drawSprite(x, y);
    }

    public void SpriteSetter(PImage spriteTemporal){
        sprite = spriteTemporal;
    }

    void drawSprite(int xpos, int ypos) {
        image(sprite, xpos, ypos);
    }

    void updateObj() {
    }
}

//inicializa la clase del jugador que hereda de SpaceShip
class Player extends SpaceShip {
    //Permiso de disparar.
    boolean canShoot = true;
    int shootdelay = 0;

    //Constructor de jugador
    Player() {
        x = width/gridsize/2;
        y = height - (20 * pixelsize);
        sprite = SpriteNaveJugador;  
    }

    //Funcion que da el movimiento con las teclas.
    void updateObj() {
        //Movimiento a la izquierda.
        if (keyPressed && keyCode == LEFT) {
            x -= 5;
            sprite = NaveRight;
        }
        
        //Movimiento a la derecha.
        if (keyPressed && keyCode == RIGHT) {
            x += 5;
            sprite = NaveLeft;
        }
        
        //Disparo
        if (keyPressed && keyCode == CONTROL && canShoot) {
            disparo_nave.play();
            sprite = SpriteNaveJugador;
            bullets.add(new Bullet(x-10, y));
            bullets.add(new Bullet(x+49, y));
            canShoot = false;
            shootdelay = 0;
        }

        shootdelay++;
        
        if (shootdelay >= 20) {
            canShoot = true;
        }
    }
}

//Clase de enemigo que tambien hereda de SpaceShip.
class Enemy extends SpaceShip {
    int life;
    int puntajeTemporal;
    
    //Constructor del enemigo
    Enemy(int xpos, int ypos, PImage spriteTemporal, int lifeTemp, int tempScore) {
        x = xpos;
        y = ypos;
        sprite = spriteTemporal;
        life = lifeTemp; 
        puntajeTemporal = tempScore;
    }
    //Actualización de la dirrecion de los enemigos.
    void updateObj() {
        if (frameCount%30 == 0) {
            x += direction * gridsize;
        }
        
        if (incy == true) {
            y += gridsize / 2;
        }
    }

    //Funcion para verificar que sigan vivos los enemigos, si no es el caso aumenta el puntaje.
    boolean alive() {
        for (int i = 0; i < bullets.size(); i++) {
            Bullet bullet = (Bullet) bullets.get(i);
            
            if (bullet.x > x && bullet.x < x + 7 * pixelsize + 5 && bullet.y > y && bullet.y < y + 5 * pixelsize) {
                bullets.remove(i);
                
                life--;
                //nextColorErrase
                
                //Aumenta el puntaje si un enemigo ha sido derrotado.
                if (life == 0) {
                    score += puntajeTemporal;
                    return false;
                }
                
                break;
            }
        }

        return true;
    }

    //Cambio de dirreción para que los enemigos no salgan de la pnatalla.
    boolean outside() {
        return x + (direction*gridsize) < 0 || x + (direction*gridsize) > width - gridsize;
    }
}

//Establece clase Bullet 'proyectil'
class Bullet {
    //Posicion de el proyectil
    int x, y;

    //Constructor del protectil
    Bullet(int xpos, int ypos) {
        x = xpos + gridsize/2 - 4;
        y = ypos;
    }

    //display del proyectil
    void draw() {
        fill(255);
        rect(x, y, pixelsize, pixelsize);
        y -= pixelsize * 2;
    }
}
